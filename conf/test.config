/*
========================================================================================
    Nextflow config file for running minimal tests
========================================================================================
    Defines input files and everything required to run a fast and simple pipeline test.

    Use as follows:
        nextflow run kaitlinchaung/nomad -profile test,<docker/singularity>

----------------------------------------------------------------------------------------
*/

params {
    config_profile_name        = 'Test profile'
    config_profile_description = 'Minimal test dataset to check pipeline function'

    // Input data
    // TODO nf-core: Specify the paths to your test data on nf-core/test-datasets
    // TODO nf-core: Give any required params for the test so that command line flags are not needed
    input                   = 'https://raw.githubusercontent.com/kaitlinchaung/nomad/main/test_samplesheet.csv'
    num_reads_first_pass    = 100000
    num_reads_second_pass   = 100000

    // Genome references
    genome = 'R64-1-1'
}

process {

    // TODO nf-core: Check the defaults for all processes
    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    withLabel:process_low {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 5.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 1.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory = { check_max( 15.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 2.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 8    * task.attempt, 'cpus'    ) }
        memory = { check_max( 30.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        cpus   = { check_max( 8    * task.attempt, 'cpus'    ) }
        memory = { check_max( 60.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_long {
        time   = { check_max( 40.h  * task.attempt, 'time'    ) }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }
}
